plot(reg$B, reg$t)
is.null(reg$B)
is.null(reg$sdfgsf)
?test_diff
sen2 <- test_diff(sen, type="manual", test="DUP_vs_WBS")
head(sen2)
head(get_results(sen2))
head(reg)
df <- get_df_wide(sen)
head(df)
homogenizeDEAresults <- function(x){
if(is(x,"list")) return(lapply(x,homogenizeDEAresults))
x <- as.data.frame(x)
colnames(x)[which(colnames(x) %in% c("FDR","padj","adj.P.Val"))] <- "FDR"
colnames(x)[which(colnames(x) %in% c("P.Value","pvalue","PValue"))] <- "PValue"
colnames(x)[which(colnames(x) %in% c("t","stat"))] <- "stat"
colnames(x)[which(colnames(x) %in% c("log2FoldChange","logFC"))] <- "logFC"
if(is.null(x$stat)) x$stat <- sign(x$logFC)*-log10(x$PValue)
p.val
return(x[order(x$FDR),])
}
DEP2dea <- function(reg, pw){
ll <- lapply(c("WBS_vs_CTRL","DUP_vs_CTRL","DUP_vs_WBS"), pw=pw, FUN=function(x,pw){
row.names(pw) <- pw$name
pw[,paste(x,c("_ratio","_p.val","_p.adj"),sep="_")]
})
suffixes <- c(".WBS",".DUP",".DUPvsWBS")
ll <- lapply(1:3, s=suffixes, ll=ll, FUN=function(x,s,ll){
a <- ll[[x]]
colnames(a) <- c("logFC","PValue","FDR")
a <- homogenizeDEAresults(a)
colnames(a) <- paste0(c("logFC","PValue","FDR"),s[[x]])
a
})
reg <- homogenizeDEAresults(reg)
ll <- lapply(ll, rn=row.names(reg), FUN=function(x,rn){ x[rn,] })
ll <- do.call(cbind, ll)
cbind(reg,ll)
}
head(wbs)
sen <- test_diff(sen, type="control", control="CTRL")
sen <- test_diff(sen, type="manual", test="DUP_vs_WBS")
sen <- add_rejections(sen, alpha = 0.05, lfc = log2(1.25))
res <- get_results(sen)
head(sen)
head(get_results(sen))
sen <- test_diff(sen, type="control", control="CTRL")
sen <- add_rejections(sen, alpha = 0.05, lfc = log2(1.25))
res <- get_results(sen)
sen <- test_diff(sen, type="manual", test="DUP_vs_WBS")
sen <- add_rejections(sen, alpha = 0.05, lfc = log2(1.25))
sen <- test_diff(sen, type="control", control="CTRL")
sen <- test_diff(sen, type="manual", test=c("WBS_vs_CTRL","DUP_vs_CTRL","DUP_vs_WBS"))
sen <- test_diff(sen, type="manual", test=c("WBS_vs_CTRL","DUP_vs_CTRL","DUP_vs_WBS"))
sen <- add_rejections(sen, alpha = 0.05, lfc = log2(1.25))
res <- get_results(sen)
df <- get_df_wide(sen)
d <- sen@colData
row.names(df) <- df$name
df <- df[,-1]
library(limma)
reg <- topTable(eBayes(lmFit(df[,colnames(sen)], model.matrix(~CN,data=colData(sen)))),number=10000)
m <- DEP2dea(reg, res)
head(res)
DEP2dea <- function(reg, pw){
ll <- lapply(c("WBS_vs_CTRL","DUP_vs_CTRL","DUP_vs_WBS"), pw=pw, FUN=function(x,pw){
row.names(pw) <- pw$name
pw[,paste0(x,c("_ratio","_p.val","_p.adj"))]
})
suffixes <- c(".WBS",".DUP",".DUPvsWBS")
ll <- lapply(1:3, s=suffixes, ll=ll, FUN=function(x,s,ll){
a <- ll[[x]]
colnames(a) <- c("logFC","PValue","FDR")
a <- homogenizeDEAresults(a)
colnames(a) <- paste0(c("logFC","PValue","FDR"),s[[x]])
a
})
reg <- homogenizeDEAresults(reg)
ll <- lapply(ll, rn=row.names(reg), FUN=function(x,rn){ x[rn,] })
ll <- do.call(cbind, ll)
cbind(reg,ll)
}
m <- DEP2dea(reg, res)
homogenizeDEAresults <- function(x){
if(is(x,"list")) return(lapply(x,homogenizeDEAresults))
x <- as.data.frame(x)
colnames(x)[which(colnames(x) %in% c("FDR","padj","adj.P.Val"))] <- "FDR"
colnames(x)[which(colnames(x) %in% c("P.Value","pvalue","PValue"))] <- "PValue"
colnames(x)[which(colnames(x) %in% c("t","stat"))] <- "stat"
colnames(x)[which(colnames(x) %in% c("log2FoldChange","logFC"))] <- "logFC"
if(is.null(x$stat)) x$stat <- sign(x$logFC)*-log10(x$PValue)
return(x[order(x$FDR),])
}
m <- DEP2dea(reg, res)
head(m)
source('~/bioinfo/testa/WBS/7q11-translation/misc.R')
dround()
source('~/bioinfo/testa/WBS/7q11-translation/misc.R')
m <- DEP2dea(reg, res)
head(m)
source('~/bioinfo/testa/WBS/7q11-translation/misc.R')
m <- DEP2dea(reg, res)
source('~/bioinfo/testa/WBS/7q11-translation/misc.R')
m <- DEP2dea(reg, res)
head(m)
source('~/bioinfo/testa/WBS/7q11-translation/misc.R')
m <- DEP2dea(reg, res)
head(m)
head(subset_mDEA(m,".WBS"))
head(subset_mDEA(m,"WBS"))
source('~/bioinfo/testa/WBS/7q11-translation/misc.R')
m2 <- toSymbol(m)
head(m)
source('~/bioinfo/testa/WBS/7q11-translation/misc.R')
tmp <- sapply(strsplit(row.names(m),".",fixed=T),FUN=function(x){ x[[2]] })
tmp <- sapply(strsplit(row.names(m),".",fixed=T),FUN=function(x){ length(x) })
head(tmp)
table(tmp)
row.names(m)[which(tmp==1)]
head(e)
head(bm2[which(bm2$hgnc_symbol==""),])
head(bm2[which(bm2$hgnc_symbol=="."),])
head(bm2[which(bm2$hgnc_symbol==NA),])
head(bm2)
head(e2$Gene.names[which(e2$Gene.names=="")])
head(e2$Gene.ids[which(e2$Gene.names=="")])
e <- read.delim("E1712151600_matrix.csv", header=T, stringsAsFactors = F)
ss <- read.delim("E1712151600_samples.csv", header=T, stringsAsFactors = F, row.names = 1)
ss$sample <- gsub("_rep1|_rep2", "", ss$Biological.Sample)
ss$sample <- gsub("Neuro_f22_","S",ss$sample)
ss$sample <- gsub("-","_",ss$sample)
e2 <- sapply(row.names(ss), FUN=function(x){
si <- e[,grep(paste0("^Intensity_",x,"_"),colnames(e))]
si[which(e[,grep(paste0("^score_",x,"_"),colnames(e))]>0.01)] <- NA
si
})
ag <- t(plag(t(e2),ss$sample, na.rm=T, agFun = mean))
nbNAs <- apply(ag,1,FUN=function(x){ sum(is.na(x)) })
w <- which(nbNAs < floor(ncol(ag)/2))
ag <- ag[w,]
pp <- e$Protein[w]
pp <- sapply(strsplit(pp,"/",fixed=T),FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x <- sort(unique(x))
paste(length(x),paste(x,collapse="/"),sep="/")
})
e2 <- t(sapply(unique(pp),FUN=function(p){
x <- ag[which(pp==p),,drop=F]
c(apply(x[order(rowMeans(x),decreasing=T)[1:min(3,nrow(x))],,drop=F],2,na.rm=T,FUN=median),nrow(x))
}))
colnames(e2)[ncol(e2)] <- "nbPeptides"
e2 <- as.data.frame(e2)
# fetch gene names from biomart
library(biomaRt)
ensembl = useMart("ensembl", dataset="hsapiens_gene_ensembl")
pids <- unique(unlist(lapply(strsplit(as.character(row.names(e2)),"/"), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x
})))
bm <- getBM(attributes=c("uniprotswissprot","hgnc_symbol","ensembl_gene_id"), filters="uniprotswissprot", values=pids, mart=ensembl)
bm2 <- plag(bm,by=bm$uniprotswissprot,agFun=function(x){ x <- x[x!=""]; paste(sort(unique(x)),collapse="; ")})
e2$Gene.names <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
xo <- x
x <- bm2[x,"hgnc_symbol"]
x <- x[x!=""]
if(length(x)=0){
source('~/bioinfo/testa/WBS/7q11-translation/misc.R')
e2$Gene.names <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
xo <- x
x <- bm2[x,"hgnc_symbol"]
x <- x[x!=""]
if(length(x)==0){
x <- bm2[x,"ensembl_gene_id"]
x <- x[x!=""]
if(length(x)==0) x <- xo
}
paste(sort(unique(x)),collapse=",")
})
e2$Gene.ids <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x <- bm2[x,"ensembl_gene_id"]
x <- x[x!=""]
paste(sort(unique(x)),collapse=",")
})
e2$nbProteins <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) return(as.numeric(x[1]))
return(length(x))
})
for(i in 1:nrow(d)) e2[which(is.na(e2[,i])),i] <- 0
e2$Protein <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x) paste(x[-1],collapse="/"))
un <- paste0(e2$Protein,".",e2$Gene.names)
w <- which(e2$nbProteins>2)
un[w] <- paste0("*",e2$nbProteins[w],".",e2$Gene.names[w])
w <- which(un %in% un[duplicated(un)])
un[w] <- paste0("*",e2$nbProteins[w],letters,".",e2$Gene.names[w])
row.names(e2) <- un
d <- data.frame( label=colnames(e2)[1:(ncol(ag))],
CN=c(1,3,1,1,2,2,3,2,1,3,2),
condition=c("WBS","CTRL","DUP")[c(1,3,1,1,2,2,3,2,1,3,2)],
replicate=c(1,1,2,3,1,2,2,3,4,3,4),
stringsAsFactors = F
)
e2$name <- row.names(e2)
e2$ID <- e2$Protein
o <- order(d$condition,row.names(d))
se <- make_se(e2, o, d[o,])
intensities <- e2[,o]
colnames(intensities) <- colnames(se)
assays(se)[["intensity"]] <- intensities
assayNames(se)[1] <- "lognorm"
colnames(se) <- paste("iN",se$condition,c("MIFF3","3391S","8091","BU1CRE","CFG","242K","809","192B","306O","316M","339C7"),sep=".")
se$individual <- c("MIF","3391","8091","BU1","CF","242","809","192","306","316","339")
se$condition[which(se$label=="S192B")] <- "AtWBS"
se$genotype <- se$condition
plot_frequency(se)
plot_numbers(se)
traceback()
colData(se)
metadata(se)
head(se@elementMetadata)
se <- normalize_vsn(se)
sen <- impute(se, fun = "MinProb")
assays(se)[["imputed"]] <- assay(sen,"lognorm")
metadata(se)$method <- "Median top 3 peptides, VSN normalization, minProb imputation."
saveRDS(se, "../../clean/Neurons/Protein/Neurons.Protein.patientDerived.SE.rds")
printTable(cameraWrapper(subset_mDEA(m,"WBS")))go.dup <- go.enrichment(row.names(dup),degs$DUP,gotype="BP", org="hs")
en <- get_df_wide(sen)
en <- en[which(en$Gene.names %in% WBSg1),]
row.names(en) <- en$Gene.names
en <- en[,colnames(se)]
byheatmap(en,scale="row",cluster_col=T)
byheatmap(en,scale="row",cluster_col=F)
se <- se[,order(se$CN)]
colnames(se)
saveRDS(se, "../../clean/Neurons/Protein/Neurons.Protein.patientDerived.SE.rds")
head(m)
volcanoDEGs(m, main="Regression on copy-number", alpha = 0.05)
hist(m$PValue)
hist(subset_mDEA(m,"WBS"),$PValue)
hist(subset_mDEA(m,"WBS")$PValue)
hist(subset_mDEA(m,"DUP")$PValue)
test <- toSymbol(subset_mDEA(m,"WBS")))
test <- toSymbol(subset_mDEA(m,"WBS"))
source('~/bioinfo/testa/WBS/7q11-translation/misc.R')
test <- toSymbol(subset_mDEA(m,"WBS"))
head(e2)
sum(e2$Gene.names=="")
head(e2[which(e2$Gene.names==""),])
e <- read.delim("E1712151600_matrix.csv", header=T, stringsAsFactors = F)
ss <- read.delim("E1712151600_samples.csv", header=T, stringsAsFactors = F, row.names = 1)
ss$sample <- gsub("_rep1|_rep2", "", ss$Biological.Sample)
ss$sample <- gsub("Neuro_f22_","S",ss$sample)
ss$sample <- gsub("-","_",ss$sample)
e2 <- sapply(row.names(ss), FUN=function(x){
si <- e[,grep(paste0("^Intensity_",x,"_"),colnames(e))]
si[which(e[,grep(paste0("^score_",x,"_"),colnames(e))]>0.01)] <- NA
si
})
ag <- t(plag(t(e2),ss$sample, na.rm=T, agFun = mean))
nbNAs <- apply(ag,1,FUN=function(x){ sum(is.na(x)) })
w <- which(nbNAs < floor(ncol(ag)/2))
ag <- ag[w,]
pp <- e$Protein[w]
pp <- sapply(strsplit(pp,"/",fixed=T),FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x <- sort(unique(x))
paste(length(x),paste(x,collapse="/"),sep="/")
})
e2 <- t(sapply(unique(pp),FUN=function(p){
x <- ag[which(pp==p),,drop=F]
c(apply(x[order(rowMeans(x),decreasing=T)[1:min(3,nrow(x))],,drop=F],2,na.rm=T,FUN=median),nrow(x))
}))
colnames(e2)[ncol(e2)] <- "nbPeptides"
e2 <- as.data.frame(e2)
head(e2)
e2$Gene.names <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
xo <- x
x <- bm2[x,"hgnc_symbol"]
x <- x[x!=""]
if(length(x)==0){
x <- bm2[x,"ensembl_gene_id"]
x <- x[x!=""]
if(length(x)==0) x <- xo
}
paste(sort(unique(x)),collapse=",")
})
head(e2)
head(e2[which(e2$Gene.names==""),])
x <- c("1","P55145")
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
xo <- x
x <- bm2[x,"hgnc_symbol"]
x <- x[x!=""]
x
pids <- unique(unlist(lapply(strsplit(as.character(row.names(e2)),"/"), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x
})))
bm <- getBM(attributes=c("uniprotswissprot","hgnc_symbol","ensembl_gene_id"), filters="uniprotswissprot", values=pids, mart=ensembl)
bm2 <- plag(bm,by=bm$uniprotswissprot,agFun=function(x){ x <- x[x!=""]; paste(sort(unique(x)),collapse="; ")})
e2$Gene.names <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
xo <- x
x <- bm2[x,"hgnc_symbol"]
x <- x[!is.na(x) & x!=""]
if(length(x)==0){
x <- xo
x <- bm2[x,"ensembl_gene_id"]
x <- x[!is.na(x) & x!=""]
if(length(x)==0) x <- xo
}
paste(sort(unique(x)),collapse=",")
})
head(e2[which(e2$Gene.names==""),])
e2$Gene.ids <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x <- bm2[x,"ensembl_gene_id"]
x <- x[x!=""]
paste(sort(unique(x)),collapse=",")
})
e2$nbProteins <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) return(as.numeric(x[1]))
return(length(x))
})
for(i in 1:nrow(d)) e2[which(is.na(e2[,i])),i] <- 0
e2$Protein <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x) paste(x[-1],collapse="/"))
un <- paste0(e2$Protein,".",e2$Gene.names)
w <- which(e2$nbProteins>2)
un[w] <- paste0("*",e2$nbProteins[w],".",e2$Gene.names[w])
w <- which(un %in% un[duplicated(un)])
un[w] <- paste0("*",e2$nbProteins[w],letters,".",e2$Gene.names[w])
row.names(e2) <- un
d <- data.frame( label=colnames(e2)[1:(ncol(ag))],
CN=c(1,3,1,1,2,2,3,2,1,3,2),
condition=c("WBS","CTRL","DUP")[c(1,3,1,1,2,2,3,2,1,3,2)],
replicate=c(1,1,2,3,1,2,2,3,4,3,4),
stringsAsFactors = F
)
e2$name <- row.names(e2)
e2$ID <- e2$Protein
o <- order(d$CN,row.names(d))
se <- make_se(e2, o, d[o,])
intensities <- e2[,o]
colnames(intensities) <- colnames(se)
assays(se)[["intensity"]] <- intensities
assayNames(se)[1] <- "lognorm"
colnames(se) <- paste("iN",se$condition,c("MIFF3","3391S","8091","BU1CRE","CFG","242K","809","192B","306O","316M","339C7"),sep=".")
se$individual <- c("MIF","3391","8091","BU1","CF","242","809","192","306","316","339")
se$condition[which(se$label=="S192B")] <- "AtWBS"
se$genotype <- se$condition
plot_frequency(se)
se <- normalize_vsn(se)
sen <- impute(se, fun = "MinProb")
assays(se)[["imputed"]] <- assay(sen,"lognorm")
metadata(se)$method <- "Median top 3 peptides, VSN normalization, minProb imputation."
saveRDS(se, "../../clean/Neurons/Protein/Neurons.Protein.patientDerived.SE.rds")
plot_numbers(se)
plot_numbers(sen)
colnames(e2)[1:(ncol(ag))]
e <- read.delim("E1712151600_matrix.csv", header=T, stringsAsFactors = F)
ss <- read.delim("E1712151600_samples.csv", header=T, stringsAsFactors = F, row.names = 1)
ss$sample <- gsub("_rep1|_rep2", "", ss$Biological.Sample)
ss$sample <- gsub("Neuro_f22_","S",ss$sample)
ss$sample <- gsub("-","_",ss$sample)
e2 <- sapply(row.names(ss), FUN=function(x){
si <- e[,grep(paste0("^Intensity_",x,"_"),colnames(e))]
si[which(e[,grep(paste0("^score_",x,"_"),colnames(e))]>0.01)] <- NA
si
})
ag <- t(plag(t(e2),ss$sample, na.rm=T, agFun = mean))
nbNAs <- apply(ag,1,FUN=function(x){ sum(is.na(x)) })
w <- which(nbNAs < floor(ncol(ag)/2))
ag <- ag[w,]
pp <- e$Protein[w]
pp <- sapply(strsplit(pp,"/",fixed=T),FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x <- sort(unique(x))
paste(length(x),paste(x,collapse="/"),sep="/")
})
e2 <- t(sapply(unique(pp),FUN=function(p){
x <- ag[which(pp==p),,drop=F]
c(apply(x[order(rowMeans(x),decreasing=T)[1:min(3,nrow(x))],,drop=F],2,na.rm=T,FUN=median),nrow(x))
}))
colnames(e2)[ncol(e2)] <- "nbPeptides"
e2 <- as.data.frame(e2)
# fetch gene names from biomart
library(biomaRt)
ensembl = useMart("ensembl", dataset="hsapiens_gene_ensembl")
pids <- unique(unlist(lapply(strsplit(as.character(row.names(e2)),"/"), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x
})))
bm <- getBM(attributes=c("uniprotswissprot","hgnc_symbol","ensembl_gene_id"), filters="uniprotswissprot", values=pids, mart=ensembl)
bm2 <- plag(bm,by=bm$uniprotswissprot,agFun=function(x){ x <- x[x!=""]; paste(sort(unique(x)),collapse="; ")})
e2$Gene.names <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
xo <- x
x <- bm2[x,"hgnc_symbol"]
x <- x[!is.na(x) & x!=""]
if(length(x)==0){
x <- xo
x <- bm2[x,"ensembl_gene_id"]
x <- x[!is.na(x) & x!=""]
if(length(x)==0) x <- xo
}
paste(sort(unique(x)),collapse=",")
})
e2$Gene.ids <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x <- bm2[x,"ensembl_gene_id"]
x <- x[x!=""]
paste(sort(unique(x)),collapse=",")
})
e2$nbProteins <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) return(as.numeric(x[1]))
return(length(x))
})
for(i in 1:nrow(d)) e2[which(is.na(e2[,i])),i] <- 0
e2$Protein <- sapply(strsplit(row.names(e2),"/",fixed=T), FUN=function(x) paste(x[-1],collapse="/"))
un <- paste0(e2$Protein,".",e2$Gene.names)
w <- which(e2$nbProteins>2)
un[w] <- paste0("*",e2$nbProteins[w],".",e2$Gene.names[w])
w <- which(un %in% un[duplicated(un)])
un[w] <- paste0("*",e2$nbProteins[w],letters,".",e2$Gene.names[w])
row.names(e2) <- un
d <- data.frame( label=colnames(e2)[1:(ncol(ag))],
CN=c(1.1,3,1,1,2,2,3,2,1,3,2),
condition=c("AtWBS","WBS","CTRL","DUP")[c(0,3,1,1,2,2,3,2,1,3,2)],
replicate=c(1,1,1,2,1,2,2,3,3,3,4),
stringsAsFactors = F
)
colnames(e2)
d <- data.frame( label=colnames(e2)[1:(ncol(ag))],
CN=c(1,3,1,1,2,2,3,2,1,3,2),
condition=c("AtWBS","WBS","CTRL","DUP")[1+c(0,3,1,1,2,2,3,2,1,3,2)],
replicate=c(1,1,1,2,1,2,2,3,3,3,4),
stringsAsFactors = F
)
e2$name <- row.names(e2)
e2$ID <- e2$Protein
o <- order(d$CN,row.names(d))
se <- make_se(e2, o, d[o,])
intensities <- e2[,o]
colnames(intensities) <- colnames(se)
assays(se)[["intensity"]] <- intensities
assayNames(se)[1] <- "lognorm"
colnames(se) <- paste("iN",se$condition,c("MIFF3","3391S","8091","BU1CRE","CFG","242K","809","192B","306O","316M","339C7"),sep=".")
se$individual <- c("MIF","3391","8091","BU1","CF","242","809","192","306","316","339")
se$condition[which(se$label=="S192B")] <- "AtWBS"
se$genotype <- se$condition
plot_frequency(se)
se <- normalize_vsn(se)
sen <- impute(se, fun = "MinProb")
assays(se)[["imputed"]] <- assay(sen,"lognorm")
metadata(se)$method <- "Median top 3 peptides, VSN normalization, minProb imputation."
saveRDS(se, "../../clean/Neurons/Protein/Neurons.Protein.patientDerived.SE.rds")
e <- read.delim("isogenics_proteomics.input.txt", header=T, stringsAsFactors = F)
e <- read.delim("isogenics_proteomics.input.txt", header=T, stringsAsFactors = F)
e <- e[which(e$Reverse!="+" & e$Potential.contaminant != "+" & e$Only.identified.by.site !="+"), ]
ei <- e[,grep("LFQ.intensity",colnames(e),fixed=T)]
w <- which(!apply(ei,1,FUN=function(x){ any(is.na(x)) }))
ei <- ei[w,]
length(w)
e <- read.delim("isogenics_proteomics.input.txt", header=T, stringsAsFactors = F)
e <- read.delim("isogenics_proteomics.input.txt", header=T, stringsAsFactors = F)
e <- e[which(e$Reverse!="+" & e$Potential.contaminant != "+" & e$Only.identified.by.site !="+"), ]
ei <- e[,grep("LFQ.intensity",colnames(e),fixed=T)]
dim(ei)
head(ei)
w <- which(!apply(ei,1,FUN=function(x){ any(is.na(x)) }))
ei <- ei[w,]
smp <- sapply(colnames(ei),FUN=function(x){ strsplit(strsplit(x,".",fixed=T)[[1]][[3]], "_", fixed=T)[[1]][[1]] })
ag <- aggregate(t(ei),by=list(sample=smp), FUN=function(x){ x <- x[which(!is.na(x) & x>0)]; if(length(x)==0) return(0); mean(x) })
row.names(ag) <- ag[,1]; ag[,1] <- NULL
ag <- t(ag)
nbNA <- apply(ag,1,FUN=function(x){ sum(x==0)})
colnames(ag) <- paste0("LFQ.intensity.",rep(c("DUP","WBS","CTRL"),each=3),"_",rep(1:3,3))
d <- data.frame( label=paste0(rep(c("DUP","WBS","CTRL"),each=3),"_",rep(1:3,3)),
condition=rep(c("DUP","WBS","CTRL"),each=3),
replicate=rep(1:3,3), CN=rep(c(3,1,2),each=3),
stringsAsFactors = F)
e <- cbind(e[w,grep("LFQ.intensity",colnames(e),invert=T,fixed=T)],ag)
head(e)
colnames(e)
head(e$Gene.names)
sum(e$Gene.names=="")
head(row.names(e))
head(e$Protein.IDs)
GTscripts::maketrans()
GTscripts::maketrans
showShapes()
pids <- unique(unlist(lapply(strsplit(as.character(row.names(e)),"/"), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x
})))
pids <- unique(unlist(lapply(strsplit(as.character(row.names(e)),"/"), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x
})))
bm <- getBM(attributes=c("uniprotswissprot","hgnc_symbol","ensembl_gene_id"), filters="uniprotswissprot", values=pids, mart=ensembl)
ensembl = useMart("ensembl", dataset="hsapiens_gene_ensembl")
bm <- getBM(attributes=c("uniprotswissprot","hgnc_symbol","ensembl_gene_id"), filters="uniprotswissprot", values=pids, mart=ensembl)
head(pids)
head(e)
pids <- unique(unlist(lapply(strsplit(as.character(e$Protein.IDs),"/"), FUN=function(x){
if(!is.na(as.numeric(x[[1]]))) x <- x[-1]
x
})))
q()
