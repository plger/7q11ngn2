geom_label(data=m[m$consistent=="bold",]) + xlim(-4.5,4.5) +
ggtitle("Master regulator analysis")
p1
dea <- readRDS("Neurons/RNA/Neurons.RNA.rest.DEA.rds")
dea <- readRDS("../clean/Neurons/RNA/Neurons.RNA.rest.DEA.rds")
SEs$RNA$system <- SEs$RNA$Dataset
SEs$RNA <- SEs$RNA[, order(factor(SEs$RNA$genotype, c("WBS","AtWBS","CTRL","DUP")), SEs$RNA$Dataset)]
se <- readRDS("../clean/Neurons/RNA/Neurons.RNA.rest.SE.rds")
se$system <- "REST"
sem <- SEtools::mergeSEs(list("7q"=SEs$RNA, "rest"=se), use.assays="log2FC")
sem$system <- factor(sem$system, c("patientDerived","isogenic","REST"))
metadata(sem)$anno_colors <- list(treatment=c("DMSO"="lightgrey", "RestInhibitor"="darkgreen"))
metadata(sem)$anno_colors$system <- c("REST"="darkolivegreen4")
m <- merge(subset_mDEA(deas$RNA, "WBS"), dea, suffix=c(".WBS",".REST"), by="row.names")
m$agg.fdr <- apply(m[,grep("FDR",colnames(m))], 1, FUN=aggregation::fisher)
m$sign.consistent <- sign(m$logFC.REST) == -sign(m$logFC.WBS) & abs(m$logFC.REST)>log2(1.1) & abs(m$logFC.WBS)>log2(1.1)
m$agg.fdr[!m$sign.consistent] <- 1
consistent <- m$Row.names[m$agg.fdr<0.05 & (m$FDR.REST<0.05 | m$FDR.WBS<0.05)]
cons.go <- goseq.enrichment(consistent, "GO:BP", allGenes=m$Row.names)
set.seed(1234)
p2 <- clusterGO(cons.go)
g <- setdiff(unique(getWordsFromString(cons.go$genes[grep("potassium",cons.go$term)])),"KCNAB1")
h <- SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
rest <- intersect(names(regulon$REST[[1]]), consistent)
h2 <- SEtools::sechm(sem, rest, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="REST targets consistent\nbetween WBS and REST inhibitor")
h3 <- SEtools::sechm(sem, setdiff(grep("^RPL|^RPS|^EIF",consistent,value=TRUE),c("RPS6KA1","EIF4H")), anno_columns=c("treatment","genotype"), use_raster=TRUE, gaps_at=c("system"), breaks=0.99, row_names_gp = gpar(fontsize = 10.5),
row_title="Translation-related DEGs\nconsistent between WBS and REST inhibitor")
p <- plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
library(ComplexHeatmap)
p <- plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
p
p
p
h <- SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
h
mg2 <- c("ANXA6","ANO3","RYR2","SLC17A","TTYH2","KCNE5","REST","JPH2","ITPR1","HCN4","CACNA1G","CANCA1I","JPH3","KCNMA1","KCNK12","KCNC3","GRIN1","KCNK4","KCNA5","KCNA4","CACNA1E","NALCN","TRPM2","SHROOM2","KCNA2","ASIC1","FKBP1B","KCNS2","GABRA2","GABRA3","GABRG2","GRIN2B","KCNQ3","GRIK3","GRIK4")
SEtools::sechm(sem, mg2, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
SEtools::sechm(sem, c(g,"CACNA1G", "GRIK3", "RYR2"), anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor") %v%
SEtools::sechm(sem, c("CACNA1G", "GRIK3", "RYR2"), anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor") %v%
SEtools::sechm(sem, c("CACNA1G", "GRIK3", "RYR2"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="other")
SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor") %v%
SEtools::sechm(sem, c("CACNA1G", "GRIK3", "RYR2"), use_raster=TRUE, anno_columns=c(),
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="other")
union(getDEGs(deas$RNA), getDEGs(subset_mDEA(deas$RNA,"WBS")))
getDEGs(subset_mDEA(deas$RNA,"WBS"))
mdegs <- union(getDEGs(deas$RNA), getDEGs(subset_mDEA(deas$RNA,"WBS")))
m$isDEG <- m$Row.names %in% mdegs
consistent <- m$Row.names[m$isDEG & m$agg.fdr<0.05 & (m$FDR.REST<0.05 | m$FDR.WBS<0.05)]
length(consistent)
consistent <- m$Row.names[m$agg.fdr<0.05 & (m$FDR.REST<0.05 | m$FDR.WBS<0.05)]
length(consistent)
head(cons.go$term,20)
intersect(intersect(consistent,mdegs),getWordsFromString(cons.go[cons.go$term=="anterograde trans-synaptic signaling","genes"]))
gi <- intersect(intersect(consistent,mdegs),getWordsFromString(cons.go[cons.go$term=="anterograde trans-synaptic signaling","genes"]))
SEtools::sechm(sem, gi, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
g <- setdiff(unique(getWordsFromString(cons.go$genes[grep("potassium",cons.go$term)])),"KCNAB1")
gi <- c("CACNA1G", "GRIK3","EIF4EBP2","SRC","IQSEC2","GABRQ","CELF4","STX3","BCHE","PRNP")
SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor") %v%
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(),
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="other synaptic")
SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.99, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor") %v%
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(),
gaps_at=c("Dataset"), breaks=0.99, row_names_gp = gpar(fontsize = 10.5),
row_title="other synaptic")
ggplot(m[m$consistent,], aes(logFC.WBS, logFC.REST, alpha=m$agg.fdr)) + geom_point()
ggplot(m[m$consistent,], aes(logFC.WBS, logFC.REST, alpha=agg.fdr)) + geom_point()
ggplot(m, aes(logFC.WBS, logFC.REST, alpha=1-agg.fdr)) + geom_point()
ggplot(m, aes(logFC.WBS, logFC.REST, alpha=-log10(agg.fdr))) + geom_point()
ggplot(m[m$isDEG,], aes(logFC.WBS, logFC.REST, alpha=-log10(agg.fdr))) + geom_point()
ggplot(m[m$isDEG & m$agg.fdr<0.05,], aes(logFC.WBS, logFC.REST, alpha=-log10(agg.fdr))) + geom_point()
ggplot(m[m$isDEG & m$FDR.REST<0.05,], aes(logFC.WBS, logFC.REST, alpha=-log10(agg.fdr))) + geom_point()
ggplot(m[m$isDEG & m$FDR.WBS <0.05 & m$FDR.REST<0.05,], aes(logFC.WBS, logFC.REST, alpha=-log10(agg.fdr))) + geom_point()
h <- SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor") %v%
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(),
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="other synaptic")
h
SEtools::sechm(sem, g, anno_columns=c("treatment","genotype","system"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
colnames(se)
SEtools::sechm(sem, g, anno_columns=c("treatment","genotype","system"), use_raster=TRUE,
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
h <- SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor") %v%
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(),
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="other consistent\nsynaptic DEGs")
h
h2 <- SEtools::sechm(sem, rest, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("Dataset"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="REST targets consistent\nbetween WBS and REST inhibitor")
h2
g
SEtools::sechm(sem, setdiff(grep("^RPL|^RPS|^EIF",consistent,value=TRUE),c("RPS6KA1","EIF4H")), anno_columns=c("treatment","genotype"), use_raster=TRUE, gaps_at=c("system"), breaks=0.99, row_names_gp = gpar(fontsize = 10.5),
row_title="Translation-related DEGs\nconsistent between WBS and REST inhibitor")
source("../colors.R")
p2 <- clusterGO(cons.go)
h3 <- SEtools::sechm(sem, setdiff(grep("^RPL|^RPS|^EIF",consistent,value=TRUE),c("RPS6KA1","EIF4H")),
anno_columns=c("treatment","genotype"), use_raster=TRUE, gaps_at=c("system"),
breaks=0.99, row_names_gp = gpar(fontsize = 10.5),
row_title="Translation-related DEGs\nconsistent between WBS and REST inhibitor")
h <- SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor") %v%
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(),
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="other consistent\nsynaptic DEGs")
p <- plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
p
h
h3
h3 <- SEtools::sechm(sem, setdiff(grep("^RPL|^RPS|^EIF",consistent,value=TRUE),c("RPS6KA1","EIF4H")),
anno_columns=c("treatment","genotype"), use_raster=TRUE, gaps_at=c("system"),
breaks=0.99, row_names_gp = gpar(fontsize = 10.5),
row_title="Translation-related DEGs\nconsistent between WBS and REST inhibitor") %v%
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(),
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="other consistent\nsynaptic DEGs")
h3
h <- SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Potassium ion transport DEGs\nconsistent between WBS and REST inhibitor")
h3 <- SEtools::sechm(sem, setdiff(grep("^RPL|^RPS|^EIF",consistent,value=TRUE),c("RPS6KA1","EIF4H")),
anno_columns=c("treatment","genotype"), use_raster=TRUE, gaps_at=c("system"),
breaks=0.99, row_names_gp = gpar(fontsize = 10.5),
row_title="Translation DEGs consistent\nbetween WBS and REST inhibitor") %v%
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(),
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="other consistent\nsynaptic DEGs")
p <- plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
p
plot_grid(grid.grabExpr(draw(h3, merge_legend=TRUE)))
h3
draw(h3, merge_legend=TRUE)
h3 <- SEtools::sechm(sem, setdiff(grep("^RPL|^RPS|^EIF",consistent,value=TRUE),c("RPS6KA1","EIF4H")),
anno_columns=c("treatment","genotype"), use_raster=TRUE, gaps_at=c("system"),
breaks=0.99, row_names_gp = gpar(fontsize = 10.5),
row_title="Translation DEGs consistent\nbetween WBS and REST inhibitor")
h3b <- SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(),
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Other consistent\nsynaptic DEGs")
draw(h3 %v% h3b, merge_legend=TRUE)
p <- plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3 %v% h3b, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
p
plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3 %v% h3b, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
h3b <- SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(), name="hm2",
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Other consistent\nsynaptic DEGs")
plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3 %v% h3b, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
#
# pdf("rest.pdf", height=8.5, width=12)
# p
# dev.off()
#
# pdf("rest_targets.pdf", height=4, width=5.5)
# draw(h2, merge_legend=TRUE)
# dev.off()
h3 <- SEtools::sechm(sem, setdiff(grep("^RPL|^RPS|^EIF",consistent,value=TRUE),c("RPS6KA1","EIF4H")),
anno_columns=c("treatment","genotype"), use_raster=TRUE, gaps_at=c("system"),
breaks=0.99, row_names_gp = gpar(fontsize = 10.5),
row_title="Rescued\ntranslation-related DEGs")
h3b <- SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(), name="hm2",
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Other rescued\nsynaptic DEGs")
plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3 %v% h3b, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
#
# pdf("rest.pdf", height=8.5, width=12)
# p
# dev.off()
#
# pdf("rest_targets.pdf", height=4, width=5.5)
# draw(h2, merge_legend=TRUE)
# dev.off()
h <- SEtools::sechm(sem, g, anno_columns=c("treatment","genotype"), use_raster=TRUE,
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Rescued potassium ion transport DEGs\n(consistent between WBS and REST inhibitor)")
plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3 %v% h3b, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
#
# pdf("rest.pdf", height=8.5, width=12)
# p
# dev.off()
#
# pdf("rest_targets.pdf", height=4, width=5.5)
# draw(h2, merge_legend=TRUE)
# dev.off()
h3b <- SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(), name="hm2", show_heatmap_legend=FALSE,
gaps_at=c("system"), breaks=0.98, row_names_gp = gpar(fontsize = 10.5),
row_title="Other rescued\nsynaptic DEGs")
plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3 %v% h3b, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
#
# pdf("rest.pdf", height=8.5, width=12)
# p
# dev.off()
#
# pdf("rest_targets.pdf", height=4, width=5.5)
# draw(h2, merge_legend=TRUE)
# dev.off()
p <- plot_grid(p1, p2, grid.grabExpr(draw(h, merge_legend=TRUE)),
grid.grabExpr(draw(h3 %v% h3b, merge_legend=TRUE)),
rel_heights=c(4,5), scale=0.95, labels="AUTO")
pdf("rest.pdf", height=8.5, width=12.5)
p
dev.off()
ggsave("rest.pdf", p, height=8.5, width=12.5)
ggsave("rest.pdf", p, height=8, width=12.5)
ea <- readRDS("../clean/Neurons/RNA/Neurons.RNA.merged.DEA.enrichments.rds")
degs <- getDEGs.any(deas$RNA)
head(degs)
length(degs)
asd <- readRDS("../extData/ID_ASD_genes.rds")
names(asd)
unique(unlist(asd[c(2,5)]))
uasd <- unique(unlist(asd[c(2,5)]))
plgINS::overlap.prob(degs,uasd,row.names(deas$RNA))
plEA(row.names(deas$RNA),degs,sets=list(asd=uasd))
library(plgINS)
plEA(row.names(deas$RNA),degs,sets=list(asd=uasd))
head(ea$reg$camera)
cam <- ea$reg$camera
cam <- cam[cam$subcat!="HPO",]
head(cam)
degs <- getDEGs.any(deas$RNA, FDR.thres=0.01)
length(degs)
?gpar
get.gpar("font")
get.gpar("family")
get.gpar("fontfamily")
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(), name="hm2", show_heatmap_legend=FALSE)
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(), name="hm2", show_heatmap_legend=FALSE, row_names_gp=gpar(fontfamily="Arial"))
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(), name="hm2", show_heatmap_legend=FALSE, row_names_gp=gpar(fontfamily="Arial"), column_title="This is a title")
SEtools::sechm(sem, gi, use_raster=TRUE, anno_columns=c(), name="hm2", show_heatmap_legend=FALSE, row_names_gp=gpar(fontfamily="Arial"), column_title="This is a title", column_title_gp=gpar(fontfamily="Arial"))
82-57
1957-1775
1775+131
1957-1775
182-131
1775+183
rna <- toSymbol(readRDS("../clean/Neurons/RNA/Neurons.RNA.merged.DEA.rds"))
suppressPackageStartupMessages({
library(SummarizedExperiment)
library(SEtools)
library(ggplot2)
library(ggrepel)
library(cowplot)
library(grid)
library(ComplexHeatmap)
})
source("../misc.R")
source("../enrichmentAnalysis.R")
source("../crossLayer.R")
source("../colors.R")
rna <- toSymbol(readRDS("../clean/Neurons/RNA/Neurons.RNA.merged.DEA.rds"))
prot <- toSymbol(readRDS("../clean/Neurons/Protein/Neurons.Protein.merged.DEA.rds"))
rpf <- readRDS("../clean/Neurons/RPF/Neurons.RPF.isogenic.DEA.rds")
te <- readRDS("../clean/Neurons/TE/Neurons.TE.isogenic.DEA.rds")
top <- readLines("~/bioinfo/extDat/TOP.genes")
layers <- list("RNA"=rna,"TE"=te,"Protein"=prot)
conv <- c("other","TOP")
names(conds) <- conds <- c("WBS","DUP")
# pl <- unlist(lapply(conds, FUN=function(cond){
#   lapply(names(layers), FUN=function(layer){
#     x <- layers[[layer]]
#     x$group <- conv[1+(row.names(x) %in% top)]
#     p <- cdfplot(x[[paste("logFC",cond,sep=".")]], x$group, size=1.5) + xlim(-1,1) +
#       xlab(paste(layer,"logFC in", cond))
#     if(layer=="Protein" & cond=="DUP"){
#       p <- p + theme(legend.position=c(.65,.2))
#     }else{
#       p <- p + theme(legend.position="none")
#     }
#     p
#   })
# }), recursive=FALSE)
# plot_grid(plotlist=pl, nrow=2)
d <- dplyr::bind_rows(lapply(layers, FUN=function(x){
dplyr::bind_rows(lapply(conds, FUN=function(cond){
ll <- split(x[[paste("logFC",cond,sep=".")]], conv[1+(row.names(x) %in% top)])
dplyr::bind_rows(lapply(ll, FUN=function(x){
x <- x[!is.na(x) & !is.infinite(x)]
data.frame( y=seq_along(x)/length(x),
logFC=sort(x) )
}), .id="Geneset")
}), .id="condition")
}), .id="layer")
d$condition <- factor(d$condition, names(conds))
d$layer <- factor(d$layer, names(layers))
p <- ggplot(d, aes(x,y,colour=Genesets)) +
geom_vline(xintercept=0, linetype="dashed") + geom_line(...)
layers <- list("RNA"=rna,"TE"=te,"RPF"=rpf, "Protein"=prot)
conv <- c("other","TOP")
names(conds) <- conds <- c("WBS","DUP")
d <- dplyr::bind_rows(lapply(layers, FUN=function(x){
dplyr::bind_rows(lapply(conds, FUN=function(cond){
ll <- split(x[[paste("logFC",cond,sep=".")]], conv[1+(row.names(x) %in% top)])
dplyr::bind_rows(lapply(ll, FUN=function(x){
x <- x[!is.na(x) & !is.infinite(x)]
data.frame( y=seq_along(x)/length(x),
logFC=sort(x) )
}), .id="Geneset")
}), .id="condition")
}), .id="layer")
d$condition <- factor(d$condition, names(conds))
d$layer <- factor(d$layer, names(layers))
p <- ggplot(d, aes(x,y,colour=Genesets)) +
geom_vline(xintercept=0, linetype="dashed") + geom_line()
pcdf <- ggplot(d, aes(logFC, y, colour=Geneset)) +
geom_vline(xintercept=0, linetype="dashed") + geom_line(size=1.3) +
facet_grid(condition~layer) + xlim(-1,1) + ylab("Cumulative proportion")
pp <- plot_grid(pcdf, labels="F")
pp
ggsave("cdfs.pdf", pp, width=10, height=3)
suppressPackageStartupMessages({
library(SummarizedExperiment)
library(SEtools)
library(ggplot2)
library(cowplot)
library(ggrepel)
library(grid)
library(viper)
library(limma)
library(ComplexHeatmap)
})
source("../misc.R")
source("../GO.R")
source("../colors.R")
source("../enrichmentAnalysis.R")
load("../extData/complexes.RData")
theme_set(theme_cowplot())
se <- readRDS("../clean/Neurons/RNA/Neurons.RNA.merged.SE.rds")
degs.iso <- getDEGs.any(readRDS("../clean/Neurons/RNA/Neurons.RNA.isogenic.DEA.rds"), FDR.thres=0.001, logFC.thres=log2(1.3))
degs.pD <- getDEGs.any(readRDS("../clean/Neurons/RNA/Neurons.RNA.patientDerived.DEA.rds"))
h1 <- sechm(se, degs.pD, do.scale=FALSE, assayName="log2FC", gaps_at="Dataset", use_raster=TRUE,
anno_columns="genotype", row_title="Patient-derived DEGs", breaks=0.985)
h2 <- sechm(se, degs.iso, do.scale=FALSE, assayName="log2FC", gaps_at="Dataset", use_raster=TRUE,
anno_columns="genotype", row_title="Isogenic DEGs", breaks=0.985)
ea <- readRDS("../clean/Neurons/RNA/Neurons.RNA.merged.DEA.enrichments.rds")
head(ea$WBS)
head(ea$WBS$goseq)
clusterGO(ea$WBS$goseq)
set.seed(123)
clusterGO(ea$WBS$goseq)
p2 <- clusterGO(ea$DUP$goseq)
p2
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2])
se$Dataset
se$Dataset[se$Dataset=="patientDerived"] <- "patient-\nderived"
h1 <- sechm(se, degs.pD, do.scale=FALSE, assayName="log2FC", gaps_at="Dataset", use_raster=TRUE,
anno_columns="genotype", row_title="Patient-derived DEGs", breaks=0.985)
---
title: "Other bioinfo supplementary Figures"
output:
html_document:
toc: true
toc_float: true
theme: 'cerulean'
highlight: 'tango'
code_folding: hide
df_print: paged
---
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2])
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2])
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2])
h1 <- sechm(se, degs.pD, do.scale=FALSE, assayName="log2FC", gaps_at="Dataset", use_raster=TRUE,
anno_columns="genotype", row_title="Patient-derived DEGs", breaks=0.985, show_heatmap_legend=FALSE, show_annotation_legend=FALSE)
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2])
h1 <- sechm(se, degs.pD, do.scale=FALSE, assayName="log2FC", gaps_at="Dataset", use_raster=TRUE,
anno_columns="genotype", row_title="Patient-derived DEGs", breaks=0.985, show_heatmap_legend=FALSE, show_annotation_legend=FALSE, isMult=TRUE)
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2])
h1 <- sechm(se, degs.pD, do.scale=FALSE, assayName="log2FC", gaps_at="Dataset", use_raster=TRUE, width=unit(3, "cm"),
anno_columns="genotype", row_title="Patient-derived DEGs", breaks=0.985, show_heatmap_legend=FALSE, show_annotation_legend=FALSE, isMult=TRUE)
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2])
h1 <- sechm(se, degs.pD, do.scale=FALSE, assayName="log2FC", gaps_at="Dataset", use_raster=TRUE, width=unit(4, "cm"),
anno_columns="genotype", row_title="Patient-derived DEGs", breaks=0.985, show_heatmap_legend=FALSE, show_annotation_legend=FALSE, isMult=TRUE)
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2])
length(degs.iso)
h2 <- sechm(se, degs.iso, do.scale=FALSE, assayName="log2FC", gaps_at="Dataset", use_raster=TRUE, width=unit(4, "cm"),
anno_columns="genotype", row_title="Isogenic DEGs", breaks=0.985)
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2])
plot_grid(p1, p2, labels=c("C: WBS vs CTRL", "D: DUP vs CTRL"), nrow=2)
p1 <- clusterGO(ea$WBS$goseq)
plot_grid(p1, p2, labels=c("C: WBS vs CTRL", "D: DUP vs CTRL"), nrow=2)
plot_grid(p1, p2, labels=c("C: WBS vs CTRL", "D: DUP vs CTRL"), nrow=2, scale=0.9)
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2], scale=0.9)
source("../colors.R")
?theme_cowplot
theme_set(theme_cowplot(font_size=12))
set.seed(123)
p1 <- clusterGO(ea$WBS$goseq)
p2 <- clusterGO(ea$DUP$goseq)
plot_grid(p1, p2, labels=c("C: WBS vs CTRL", "D: DUP vs CTRL"), nrow=2, scale=0.9)
plot_grid(p1, p2, labels=c("C: WBS vs CTRL", "D: DUP vs CTRL"), nrow=2, scale=0.95)
set.seed(123)
p1 <- clusterGO(ea$WBS$goseq, k = 5)
p2 <- clusterGO(ea$DUP$goseq, k = 5)
plot_grid(p1, p2, labels=c("C: WBS vs CTRL", "D: DUP vs CTRL"), nrow=2, scale=0.95)
set.seed(123)
p1 <- clusterGO(ea$WBS$goseq, k = 5) + ggtitle("WBS vs CTRL")
p2 <- clusterGO(ea$DUP$goseq, k = 5) + ggtitle("DUP vs CTRL")
plot_grid(p1, p2, nrow=2, scale=0.95)
clusterGO
set.seed(123)
p1 <- clusterGO(ea$WBS$goseq, k = 5, fontsize=3) + ggtitle("WBS vs CTRL")
p2 <- clusterGO(ea$DUP$goseq, k = 5, fontsize=3) + ggtitle("DUP vs CTRL")
plot_grid(p1, p2, nrow=2, scale=0.95)
theme_set(theme_cowplot(font_size=11))
set.seed(123)
p1 <- clusterGO(ea$WBS$goseq, k = 5, fontsize=3) + ggtitle("WBS vs CTRL")
p2 <- clusterGO(ea$DUP$goseq, k = 5, fontsize=3) + ggtitle("DUP vs CTRL")
plot_grid(p1, p2, nrow=2, scale=0.95)
plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2], scale=0.95)
set.seed(123)
p1 <- clusterGO(ea$WBS$goseq, k = 5, fontsize=3) + ggtitle("WBS vs CTRL")
p2 <- clusterGO(ea$DUP$goseq, k = 5, fontsize=3) + ggtitle("DUP vs CTRL")
plot_grid(p1, p2, nrow=2, scale=0.95)
ph <- plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, labels=LETTERS[1:2], scale=0.95)
plot_grid(ph, plot_grid(p1, p2, nrow=2, scale=0.95), labels="AUTO", nrow=1, rel_widths=c(4.5,5.5))
theme_set(theme_cowplot(11))
theme_replace(text=element_text(family="Arial", face="bold", colour="black"))
set.seed(123)
p1 <- clusterGO(ea$WBS$goseq, k = 5, fontsize=3) + ggtitle("WBS vs CTRL")
p2 <- clusterGO(ea$DUP$goseq, k = 5, fontsize=3) + ggtitle("DUP vs CTRL")
plot_grid(p1, p2, nrow=2, scale=0.95)
plot_grid(ph, plot_grid(p1, p2, nrow=2, scale=0.95), labels="AUTO", nrow=1, rel_widths=c(4.5,5.5))
ph <- plot_grid(grid.grabExpr(draw(h1, merge_legends=TRUE)),
grid.grabExpr(draw(h2, merge_legends=TRUE)),
nrow=1, scale=0.95)
plot_grid(ph, plot_grid(p1, p2, nrow=2, scale=0.95), labels="AUTO", nrow=1, rel_widths=c(4.5,5.5))
pdf("S4_top.pdf", width=10, height=5.5)
plot_grid(ph, plot_grid(p1, p2, nrow=2, scale=0.95), labels="AUTO", nrow=1, rel_widths=c(4.5,5.5))
dev.off()
